import { create } from "domain";
import { ref } from "process";

export const components = {
    securitySchemes:{
        BearerAuth: {
            type: "http",
            scheme: "bearer",
            bearerFormat:  'JWT'
        },
    },
    schemas:{
        Error:{
            type: 'object',
            properties: {
                statusCode: { type: 'integer', 
                            example: 400 },
                message: { type: 'string', 
                        example: 'Invalid request' },
                error: { type: 'array', 
                        items: { type: 'string' }, 
                        example: ['Invalid email format', 'Password too short'] },
            },
        },
        Login: {
            type: 'object',
            properties: {
                email: { type: 'string', 
                        format: 'email', 
                        example: 'fulano@gmail.com' },
                password: { type: 'string', 
                            minLength: 6, 
                            maxLength: 20, 
                            pattern: '^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\[\\]{};\':"\\\\|,.<>/?]).+$', 
                            example: 'FULANO1+' },
            },
            required: ['email', 'password'],
        },
        User: {
            type: 'object',
            properties: {
                id: { type: 'string', 
                        format: 'uuid', },
                firstName: { type: 'string', 
                            minLength: 3, 
                            maxLength: 50, 
                            example: 'Fulano' },
                lastName: { type: 'string', 
                            minLength: 4, 
                            maxLength: 50, 
                            example: 'Silveira' },
                email: { type: 'string', 
                        format: 'email',
                        example: 'fulano@gmail.com'},
                createdAt: { type: 'string', 
                            format: 'date'},
                updatedAt: { type: 'string',
                            format: 'date'},
                role: { type: 'string', enum: ['admin'] },
            },
            required: ['firstName', 'lastName', 'email', 'password', 'role'],
        },
        AdminRegister: {
            type: 'object',
            properties: {
                firstName: { type: 'string', 
                            minLength: 3, 
                            maxLength: 50, 
                            example: 'Fulano' },
                lastName: { type: 'string', 
                            minLength: 4, 
                            maxLength: 50, 
                            example: 'Silveira' },
                email: { type: 'string', 
                        format: 'email',
                        example: 'fulano@gmail.com'},
                password: { type: 'string', 
                            minLength: 6, 
                            maxLength: 20, 
                            pattern: '^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\[\\]{};\':"\\\\|,.<>/?]).+$',
                            example: 'FULANO1+' },
                role: { type: 'string', enum: ['admin'] },
            },
            required: ['firstName', 'lastName', 'email', 'password', 'role'],
        },
        PatientRegister: {
            type: 'object',
            properties: {
                firstName: { type: 'string', 
                            minLength: 3, 
                            maxLength: 50,
                            example: 'Ciclano' },
                lastName: { type: 'string', 
                            minLength: 4, 
                            maxLength: 50,
                            example: 'Souza' },
                email: { type: 'string', 
                        format: 'email',
                        example: 'ciclano@gmail.com'},
                password: { type: 'string', 
                            minLength: 6, 
                            maxLength: 20, 
                            pattern: '^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\[\\]{};\':"\\\\|,.<>/?]).+$',
                            example: 'CICLANO1+' },
                role: { type: 'string', enum: ['patient'] },
                patientData: {
                    type: 'object',
                    properties: {
                        cpf: { type: 'string', 
                                pattern: '^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$',
                                example: '123.456.789-00' },
                        cellphone: { type: 'string',
                                    pattern: '^\\d{2}-\\d{5}-\\d{4}$',
                                    example: '51-34567-8901' },
                        birthDate: { type: 'string', 
                                    format: 'date',
                                    example: '1990-01-01' },
                    },
                    required: ['cpf', 'cellphone', 'birthDate'],
                },
            },
            required: ['firstName', 'lastName', 'email', 'password', 'role', 'patientData'],
        },
        MedicRegister: {
            type: 'object',
            properties: {
                firstName: { type: 'string', 
                            minLength: 3, 
                            maxLength: 50,
                            example: 'Beltrano' },
                lastName: { type: 'string', 
                            minLength: 4, 
                            maxLength: 50,
                            example: 'Santos' },
                email: { type: 'string', 
                        format: 'email',
                        example: 'beltrano@gmail.com'},
                password: { type: 'string', 
                            minLength: 6, 
                            maxLength: 20, 
                            pattern: '^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\[\\]{};\':"\\\\|,.<>/?]).+$',
                            example: 'BELTRANO1+' },
                role: { type: 'string', enum: ['medic'] },
                medicData: {
                    type: 'object',
                    properties: {
                        speciality: { type: 'string', 
                                    minLength: 3, 
                                    maxLength: 85,
                                    example: 'Cardiologia' },
                        crm: { type: 'string', 
                                pattern: '^\\d{6}-\\d{2}/[A-Z]{2}$',
                                example: '123456-78/RS' },
                        availableSlots: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'date-time',
                                example: '2023-10-01T10:00:00Z',
                            },
                        },
                    },
                    required: ['speciality', 'crm'],
                },
            },
            required: ['firstName', 'lastName', 'email', 'password', 'role', 'medicData'],
        },
        UserUpdate:{
            type: 'object',
            properties: {
                firstName:{ type: 'string', 
                            minLength: 3, 
                            maxLength: 50,
                            example: 'Deltrana' },
                lastName:{ type: 'string', 
                            minLength: 4, 
                            maxLength: 50,
                            example: 'Santiago' },
                email:{ type: 'string', 
                        format: 'email',
                        example: 'deltrana@gmail.com'},
                password:{ type: 'string', 
                            minLength: 6, 
                            maxLength: 20, 
                            pattern: '^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\[\\]{};\':"\\\\|,.<>/?]).+$',
                            example: 'DELTRANA+1' },
                patientData: {ref: '#/components/schemas/PatientDataUpdate'},
                medicData: {ref: '#/components/schemas/MedicDataUpdate'},
            },
        },
        PatientDataUpdate:{
            type: 'object',
            properties: {
                cpf: { type: 'string', 
                                pattern: '^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$',
                                example: '852.963.147-01' },
                        cellphone: { type: 'string',
                                    pattern: '^\\d{2}-\\d{5}-\\d{4}$',
                                    example: '51-34972-6204' },
                        birthDate: { type: 'string', 
                                    format: 'date',
                                    example: '1990-02-01' },
            },
        },
        MedicDataUpdate:{
            type: 'object',
            properties: {
                speciality: { type: 'string', 
                                    minLength: 3, 
                                    maxLength: 85,
                                    example: 'Neurologia' },
                        crm: { type: 'string', 
                                pattern: '^\\d{6}-\\d{2}/[A-Z]{2}$',
                                example: '963147-98/RS' },
                        availableSlots: {
                            type: 'array',
                            items: {
                                type: 'string',
                                format: 'date-time',
                                example: '2023-10-01T10:00:00Z',
                            },
                        },
            },
        },
        Consult:{
            type: 'object',
            properties: {
                id: { type: 'string', 
                        format: 'uuid', },
                patientId: { type: 'string',
                            format: 'uuid',},
                medicId: { type: 'string',
                        format: 'uuid' },
                date: { type: 'string',
                            format: 'date-time',
                            example: '2023-10-01T10:00:00Z' },
                status: { type: 'string', 
                        enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED'],
                        default: 'SCHEDULED' },
                createdAt: { type: 'string', 
                            format: 'date'},
                updatedAt: { type: 'string',
                            format: 'date'},
                notes: { type: 'string',
                        minLength: 1,
                        maxLength: 1000,
                        example: 'Paciente apresenta sintomas de gripe e febre.' },
            },
            required: ['patientId', 'medicId', 'date'],
        },
        ConsultResponse:{
            type: 'object',
                properties: {
                id: { type: 'string',
                        format: 'uuid' },
                patientId: { type: 'string',
                        format: 'uuid' },
                medicId: { type: 'string',
                        format: 'uuid' },
                date: {
                        type: 'string',
                        format: 'date-time',
                        example: '2023-10-01T10:00:00Z'
                },
                status: {
                type: 'string',
                enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED']
                },
                notes: {
                    type: 'string',
                    example: 'Paciente apresenta sintomas de gripe e febre.'
                },
                createdAt: { type: 'string', format: 'date-time' },
                updatedAt: { type: 'string', format: 'date-time' },
                patientData: {
                type: 'object',
                properties: {
                    firstName: { type: 'string',
                        example: 'Ciclano' },
                    lastName: { type: 'string',
                        example: 'Souza' }
                },
                },
                medicData: {
                type: 'object',
                properties: {
                    firstName: { type: 'string',
                        example: 'Beltrano' },
                    lastName: { type: 'string',
                        example: 'Santos' }
                }
                }
            },
        },
        CreateConsult:{
            type: 'object',
            properties: {
                patientId: { type: 'string',
                            format: 'uuid',},
                medicId: { type: 'string',
                        format: 'uuid' },
                date: { type: 'string',
                            format: 'date-time',
                            example: '2023-10-01T10:00:00Z' },
                status: { type: 'string', 
                        enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED'],
                        default: 'SCHEDULED' },
                notes: { type: 'string',
                        minLength: 1,
                        maxLength: 1000,
                        example: 'Paciente apresenta sintomas de gripe e febre.' },
            },
            required: ['patientId', 'medicId', 'date'],
        },
        UpdateConsultStatus:{
            type: 'object',
            properties: {
                status: { type: 'string', enum: ['COMPLETED', 'CANCELLED'] },
            },
            required: ['status'],
        },
        CancelConsult:{
            type: 'object',
            properties: {
                status: { type: 'string', enum: ['CANCELLED'] },
            },
            required: ['status'],
        },
        AddNotesToTheConsult:{
            type: 'object',
            properties: {
                notes: { type: 'string', minLength: 1, maxLength: 1000, example: 'Paciente apresenta sintomas de gripe e febre.'},
            },
            required: ['notes'],
        }
    }
}